services:
  db:
    image: 'postgres:latest'
    container_name: postgres_cinema
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_cinema_data:/var/lib/postgresql/data/
    networks:
      - cinema_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_cinema
    ports:
      - "3333:80"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_cinema_data:/var/lib/pgadmin
    environment:
      - PGADMIN_CONFIG_MAX_LOGIN_ATTEMPTS
    networks:
      - cinema_network

  web:
    restart: always
    build: .
    container_name: backend_cinema
    command: [ "/bin/bash", "/commands/run_web_server_dev.sh" ]
    env_file:
      - .env
    environment:
      - LOG_LEVEL=debug
      - PYTHONPATH=/usr/src/fastapi
      - WATCHFILES_FORCE_POLLING=true
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/fastapi
    networks:
      - cinema_network

  migrator:
    build: .
    container_name: alembic_migrator_cinema
    command: [ "/bin/bash", "/commands/run_migration.sh" ]
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/fastapi
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi
    networks:
      - cinema_network

  mailhog:
    restart: always
    build:
      context: .
      dockerfile: ./docker/mailhog/Dockerfile
    container_name: mailhog_cinema
    command: [ "/bin/bash", "-c", "/commands/setup_mailhog_auth.sh && ~/go/bin/MailHog" ]
    ports:
      - "8025:8025"
      - "1025:1025"
    env_file:
      - .env
    environment:
      MH_AUTH_FILE: /mailhog.auth
    networks:
      - cinema_network

  minio:
    image: minio/minio:latest
    container_name: minio-cinema
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cinema_network

  minio_mc:
    build:
      context: .
      dockerfile: docker/minio_mc/Dockerfile
    container_name: minio_mc_cinema
    command: [ "/bin/sh", "-c", "/commands/setup_minio.sh" ]
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - cinema_network

  redis:
    image: redis:latest
    container_name: redis_cinema
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cinema_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  celery_worker:
    container_name: celery_worker
    build: .
    command: celery -A workers.celery_worker worker --loglevel=info
    volumes:
      - ./src:/usr/src/fastapi
    networks:
      - cinema_network
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}

    depends_on:
      - db
      - redis

  flower:
    container_name: flower
    build: .
    command: celery -A workers.celery_worker flower --port=5555
    ports:
      - "5556:5555"
    env_file:
      - .env
    networks:
      - cinema_network
    environment:
      - PYTHONPATH=/usr/src/fastapi
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - web
      - redis
      - celery_worker

  stripe-cli:
    image: stripe/stripe-cli
    env_file:
      - .env
    entrypoint: [ "sh", "-c" ]
    command: >
      "stripe listen
      --api-key $${STRIPE_SECRET_KEY}
      --device-name local-user
      --forward-to http://web:8000/api/webhooks/"
    networks:
      - cinema_network
    depends_on:
      - web

volumes:
  postgres_cinema_data:
    driver: local
  pgadmin_cinema_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local


networks:
  cinema_network:
    driver: bridge
